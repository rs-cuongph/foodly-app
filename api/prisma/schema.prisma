// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              Int                       @id @default(autoincrement())
  email                           String                    @unique
  displayName                     String?
  role                            Role                      @default(USER)
  blockTo                         DateTime?
  myCoin                          Int                       @default(0) @db.Integer // "số coin hiện tại còn trong account"
  paymentSettings                 Json? // Note: Assumes you have a Prisma Json provider
  maxOrderNotPay                  Int                       @default(5)
  createdAt                       DateTime                  @default(now())
  updatedAt                       DateTime                  @updatedAt
  orderCreated                    Order[]                   @relation("orderCreated")
  orderUpdated                    Order[]                   @relation("orderUpdated")
  orderGroupCreated               OrderGroup?               @relation("orderGroupCreated")
  orderGroupUpdated               OrderGroup?               @relation("orderGroupUpdated")
  orderGroupTemplateCreated       OrderGroupTemplate[]      @relation("orderGroupTemplateCreated")
  menuItemCreated                 MenuItem[]                @relation("menuItemCreated")
  StatisticUser                   Statistic[]               @relation("StatisticUser")
  RequestAddCoinHistoriesCreated  RequestAddCoinHistories[] @relation("RequestAddCoinHistoriesCreated")
  RequestAddCoinHistoriesApproved RequestAddCoinHistories[] @relation("RequestAddCoinHistoriesApproved")
}

model Order {
  id           Int        @id @default(autoincrement())
  orderGroupId Int
  created      User       @relation("orderCreated", fields: [createdBy], references: [id])
  createdBy    Int
  updated      User       @relation("orderUpdated", fields: [updatedBy], references: [id])
  updatedBy    Int
  quantity     Int
  status       OderStatus @default(PROCESSING)
  payment      String     @db.VarChar()
  price        Int
  Amount       Int
  menu         Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model OrderGroup {
  id              Int        @id @default(autoincrement())
  code            String     @db.VarChar()
  created         User       @relation("orderGroupCreated", fields: [createdBy], references: [id])
  createdBy       Int        @unique
  updated         User       @relation("orderGroupUpdated", fields: [updatedBy], references: [id])
  updatedBy       Int        @unique
  publicStartTime DateTime
  publicEndTime   DateTime
  price           BigInt
  shareScope      ShareScope @default(PUBLIC)
  inviteId        Int
  menuId          Int
  discount        Int
  menuItem        MenuItem[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model OrderGroupTemplate {
  id           Int  @id @default(autoincrement())
  templateJson Json
  created      User @relation("orderGroupTemplateCreated", fields: [createdBy], references: [id])
  createdBy    Int
}

model MenuItem {
  id           Int        @id @default(autoincrement())
  name         Int
  created      User       @relation("menuItemCreated", fields: [createdBy], references: [id])
  createdBy    Int
  price        Int
  discount     Int
  orderGroup   OrderGroup @relation(fields: [orderGroupId], references: [id])
  orderGroupId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Statistic {
  id              Int    @id @default(autoincrement())
  countOrderGroup Int
  countOrder      Int
  monthYear       Int
  amount          BigInt
  user            User   @relation("StatisticUser", fields: [userId], references: [id])
  userId          Int
}

model RequestAddCoinHistories {
  id         Int                  @id @default(autoincrement())
  coin       Int
  status     RequestAddCoinStatus @default(INIT)
  created    User                 @relation("RequestAddCoinHistoriesCreated", fields: [createdBy], references: [id])
  createdBy  Int
  approved   User                 @relation("RequestAddCoinHistoriesApproved", fields: [approvedBy], references: [id])
  approvedBy Int
}

model PaymentHistory {
  id        Int                  @id @default(autoincrement())
  amount    BigInt
  order_id  Int
  bank_json Json
  status    PaymentHistoryStatus @default(INIT)
}

enum Role {
  USER
  ADMIN
}

enum OderStatus {
  PROCESSING
}

enum ShareScope {
  PUBLIC
}

enum RequestAddCoinStatus {
  INIT
}

enum PaymentHistoryStatus {
  INIT
}
