// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "relationJoins", "nativeDistinct", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int      @id @default(autoincrement())
  short_name  String   @db.VarChar(100)
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(500)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  User        User[]
}

model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique @db.VarChar(255)
  password             String?         @db.VarChar(255)
  display_name         String?         @db.VarChar(255)
  role                 Role            @default(USER)
  block_to             DateTime?
  my_coin              Decimal         @default(0) @db.Decimal(15, 2)
  payment_setting      Json?
  max_order            Float           @default(5.0)
  organization_id      Int
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  organization         Organization    @relation(fields: [organization_id], references: [id])
  group                Group[]
  order_created        Order[]         @relation("CreatedBy_Order")
  order_updated        Order[]         @relation("UpdatedBy_Order")
  order_group_template GroupTemplate[] @relation("CreatedBy_GroupTemplate")
}

model Group {
  id                Int         @id @default(autoincrement())
  code              String?     @unique @db.VarChar(100)
  name              String      @db.VarChar(255)
  created_by_id     Int
  created_by        User        @relation(fields: [created_by_id], references: [id])
  public_start_time DateTime
  public_end_time   DateTime
  price             Decimal     @default(0) @db.Decimal(15, 2)
  share_scope       ShareScope? @default(PUBLIC)
  type              GroupType   @default(MANUAL)
  menu_items        MenuItem[]
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  is_deleted        Boolean     @default(false)
  orders            Order[]
}

model MenuItem {
  id         Int      @id @default(autoincrement())
  name       String
  price      Decimal  @default(0) @db.Decimal(15, 2)
  group_id   Int
  group      Group    @relation(fields: [group_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Order {
  id             Int                  @id @default(autoincrement())
  quantity       Int
  status         OrderStatus          @default(PROCESSING)
  payment_method String               @db.VarChar(255)
  price          Decimal              @default(0) @db.Decimal(15, 2)
  amount         Decimal              @default(0) @db.Decimal(15, 2)
  menu           Json
  group_id       Int
  group          Group                @relation(fields: [group_id], references: [id], onDelete: Cascade)
  created_by_id  Int
  created_by     User                 @relation("CreatedBy_Order", fields: [created_by_id], references: [id])
  updated_by_id  Int
  updated_by     User                 @relation("UpdatedBy_Order", fields: [updated_by_id], references: [id])
  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt
  transactions   OrderOnTransaction[]
}

model GroupTemplate {
  id            Int  @id @default(autoincrement())
  templateJson  Json
  created_by_id Int
  created_by    User @relation("CreatedBy_GroupTemplate", fields: [created_by_id], references: [id])
}

model OrderOnTransaction {
  id             Int         @id @default(autoincrement())
  order_id       Int
  order          Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)
  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model Transaction {
  id            String               @id @default(uuid())
  status        TransactionStatus    @default(INIT)
  metadata      Json
  reason_cancel String?              @db.VarChar(255)
  created_at    DateTime             @default(now())
  updated_at    DateTime             @updatedAt
  orders        OrderOnTransaction[]
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum TransactionStatus {
  INIT
  PROCESSING
  CANCELED
  COMPLETED
}

enum ShareScope {
  PUBLIC
  PRIVATE
}

enum RequestAddCoinStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum PaymentHistoryStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum GroupType {
  MANUAL
  AUTO
}
