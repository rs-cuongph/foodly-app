// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "nativeDistinct", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String        @id @default(uuid())
  code        String        @unique @db.VarChar(16)
  short_name  String        @db.VarChar(100)
  name        String        @db.VarChar(255)
  description String?       @db.VarChar(500)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  User        User[]
  Group       Group[]
  Order       Order[]
  Transaction Transaction[]
}

model User {
  id                              String          @id @default(uuid())
  email                           String          @db.VarChar(255)
  password                        String?         @db.VarChar(255)
  display_name                    String?         @db.VarChar(255)
  role                            Role            @default(USER)
  block_to                        DateTime?
  my_coin                         Decimal         @default(0) @db.Decimal(15, 2)
  payment_setting                 Json?
  max_order                       Float           @default(5.0)
  organization_id                 String
  reset_password_token            String?
  reset_password_token_expires_at DateTime?
  created_at                      DateTime        @default(now())
  updated_at                      DateTime        @updatedAt
  organization                    Organization    @relation(fields: [organization_id], references: [id])
  group                           Group[]
  order_created                   Order[]         @relation("CreatedBy_Order")
  order_updated                   Order[]         @relation("UpdatedBy_Order")
  order_group_template            GroupTemplate[] @relation("CreatedBy_GroupTemplate")
  login_attempts                  LoginAttempt[]  @relation("UserLoginAttempts")
  Transaction                     Transaction[]

  @@unique([email, organization_id])
}

model Group {
  id                String       @id @default(uuid())
  code              String?      @unique @db.VarChar(100)
  name              String       @db.VarChar(255)
  created_by_id     String
  created_by        User         @relation(fields: [created_by_id], references: [id])
  public_start_time DateTime
  public_end_time   DateTime
  price             Decimal      @default(0) @db.Decimal(15, 2)
  share_scope       ShareScope?  @default(PUBLIC)
  type              GroupType    @default(MANUAL)
  status            GroupStatus  @default(INIT)
  menu_items        MenuItem[]
  organization_id   String
  invite_code       String?      @unique @db.VarChar(100)
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  deleted_at        DateTime?
  orders            Order[]
  organization      Organization @relation(fields: [organization_id], references: [id])
}

model MenuItem {
  id         String    @id @default(uuid())
  name       String
  price      Decimal   @default(0) @db.Decimal(15, 2)
  group_id   String
  group      Group     @relation(fields: [group_id], references: [id])
  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Order {
  id                 String               @id @default(uuid())
  quantity           Int
  status             OrderStatus          @default(PROCESSING)
  payment_method     String               @db.VarChar(255)
  price              Decimal              @default(0) @db.Decimal(15, 2)
  amount             Decimal              @default(0) @db.Decimal(15, 2)
  menu               Json
  group_id           String
  group              Group                @relation(fields: [group_id], references: [id], onDelete: Cascade)
  note               String?              @db.VarChar(255)
  created_by_id      String
  created_by         User                 @relation("CreatedBy_Order", fields: [created_by_id], references: [id])
  updated_by_id      String
  updated_by         User                 @relation("UpdatedBy_Order", fields: [updated_by_id], references: [id])
  organization_id    String
  organization       Organization         @relation(fields: [organization_id], references: [id])
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  deleted_at         DateTime?
  transaction_id     String?
  transaction        Transaction?         @relation(fields: [transaction_id], references: [id])
  OrderOnTransaction OrderOnTransaction[]

  @@index([transaction_id])
}

model GroupTemplate {
  id            String @id @default(uuid())
  templateJson  Json
  created_by_id String
  created_by    User   @relation("CreatedBy_GroupTemplate", fields: [created_by_id], references: [id])
}

model Transaction {
  id                 String               @id @default(uuid())
  status             TransactionStatus    @default(INIT)
  type               TransactionType      @default(SINGLE_ORDER)
  unique_code        String               @unique @db.VarChar(20)
  total_amount       Decimal              @default(0) @db.Decimal(15, 2)
  metadata           Json?
  reason_cancel      String?              @db.VarChar(255)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  orders             Order[]
  created_by_id      String?
  created_by         User?                @relation(fields: [created_by_id], references: [id])
  organization_id    String?
  organization       Organization?        @relation(fields: [organization_id], references: [id])
  OrderOnTransaction OrderOnTransaction[]

  @@index([created_by_id])
  @@index([organization_id])
}

// OrderOnTransaction is a table that contains the orders that are on a transaction
model OrderOnTransaction {
  id             String      @id @default(uuid())
  order_id       String
  order          Order       @relation(fields: [order_id], references: [id])
  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  amount         Decimal     @default(0) @db.Decimal(15, 2)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model LoginAttempt {
  id                String   @id @default(uuid())
  email             String   @db.VarChar(255)
  organization_code String   @db.VarChar(16)
  user_id           String?
  ip_address        String?  @db.VarChar(45)
  user_agent        String?  @db.VarChar(255)
  created_at        DateTime @default(now())
  user              User?    @relation("UserLoginAttempts", fields: [user_id], references: [id], onDelete: SetNull)

  @@index([email, organization_code, created_at])
  @@index([user_id, created_at])
}

enum Role {
  USER
  SHOP
  ADMIN
}

enum OrderStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum TransactionStatus {
  INIT
  PROCESSING
  AWAITING_CONFIRMATION
  CANCELED
  COMPLETED
}

enum TransactionType {
  SINGLE_ORDER
  SETTLEMENT
}

enum ShareScope {
  PUBLIC
  PRIVATE
}

enum RequestAddCoinStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum PaymentHistoryStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum GroupType {
  MANUAL
  AUTO
}

enum GroupStatus {
  INIT
  LOCKED
  PROCESSING
  COMPLETED
  CANCELED
}
