// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              Int                       @id @default(autoincrement())
  email                           String                    @unique
  displayName                     String?
  role                            Role                      @default(USER)
  blockTo                         DateTime?
  myCoin                          Int                       @default(0) @db.Integer // "số coin hiện tại còn trong account"
  paymentSettings                 Json? // Note: Assumes you have a Prisma Json provider
  maxOrderNotPay                  Int                       @default(5)
  currentRefreshToken             String?
  password                        String?                   @db.VarChar()
  createdAt                       DateTime                  @default(now())
  updatedAt                       DateTime                  @updatedAt
  deletedAt                       DateTime?
  orderCreated                    Order[]                   @relation("Order_createdBy")
  orderUpdated                    Order[]                   @relation("Order_updatedBy")
  orderGroupCreated               OrderGroup?               @relation("OrderGroup_createdBy")
  orderGroupTemplateCreated       OrderGroupTemplate[]      @relation("OrderGroupTemplate_createdBy")
  menuItemCreated                 MenuItem[]                @relation("MenuItem_createdBy")
  statisticUser                   Statistic[]               @relation("Statistic_user")
  requestAddCoinHistoriesCreated  RequestAddCoinHistories[] @relation("RequestAddCoinHistories_createdBy")
  requestAddCoinHistoriesApproved RequestAddCoinHistories[] @relation("RequestAddCoinHistories_approvedBy")
}

model Order {
  id           Int         @id @default(autoincrement())
  orderGroupId Int
  createdBy    User        @relation("Order_createdBy", fields: [createdById], references: [id])
  createdById  Int
  updatedBy    User        @relation("Order_updatedBy", fields: [updatedById], references: [id])
  updatedById  Int
  quantity     Int
  status       OrderStatus @default(PROCESSING)
  payment      String      @db.VarChar()
  price        Int
  amount       Int
  menu         Json
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderGroup {
  id              Int            @id @default(autoincrement())
  code            String         @db.VarChar()
  createdBy       User           @relation("OrderGroup_createdBy", fields: [createdById], references: [id])
  createdById     Int            @unique
  publicStartTime DateTime
  publicEndTime   DateTime
  price           BigInt
  shareScope      ShareScope     @default(PUBLIC)
  inviteId        Int
  menuId          Int
  discount        Int
  menuItem        MenuItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  type            OrderGroupType @default(MANUAL)
}

model OrderGroupTemplate {
  id           Int  @id @default(autoincrement())
  templateJson Json
  createdBy    User @relation("OrderGroupTemplate_createdBy", fields: [createdById], references: [id])
  createdById  Int
}

model MenuItem {
  id           Int        @id @default(autoincrement())
  name         Int
  createdBy    User       @relation("MenuItem_createdBy", fields: [createdById], references: [id])
  createdById  Int
  price        Int
  discount     Int
  orderGroup   OrderGroup @relation(fields: [orderGroupId], references: [id])
  orderGroupId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Statistic {
  id              Int    @id @default(autoincrement())
  countOrderGroup Int
  countOrder      Int
  monthYear       Int
  amount          BigInt
  user            User   @relation("Statistic_user", fields: [userId], references: [id])
  userId          Int
}

model RequestAddCoinHistories {
  id           Int                  @id @default(autoincrement())
  coin         Int
  status       RequestAddCoinStatus @default(INIT)
  createdBy    User                 @relation("RequestAddCoinHistories_createdBy", fields: [createdById], references: [id])
  createdById  Int
  approvedBy   User                 @relation("RequestAddCoinHistories_approvedBy", fields: [approvedById], references: [id])
  approvedById Int
}

model Transaction {
  id            Int               @id @default(autoincrement())
  status        TransactionStatus @default(INIT)
  paymentLinkId String?
  metadata      Json
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum TransactionStatus {
  INIT
  PROCESSING
  CANCELED
  COMPLETED
}

enum ShareScope {
  PUBLIC
  PRIVATE
}

enum RequestAddCoinStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum PaymentHistoryStatus {
  PROCESSING
  INIT
  CANCELED
  COMPLETED
}

enum OrderGroupType {
  MANUAL
  AUTO
}
